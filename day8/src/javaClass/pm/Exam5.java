package javaClass.pm;

public class Exam5 {
	// 객체의 타입 반환
	
/*
기본 자료형에서 보았듯 자바는 =을 사용하여 외쪽과 오른쪽의 자료형이 일치해야한다.
만약 자료형이 다르면 자바가 자동으로 타입을 변환해 주거나
개발자가 명시적으로 타입을 변환해야 한다. 객체도 마찬가지로 타입 변환이 일어난다.

 객체에서는 자식 클래스에서 부모 클래스 쪽으로 변환 되는 것이 업캐스팅
 그 반대가 다운 캐스팅
 하지만 객체 명시적으로 적어줘도 다운 캐스팅 다체가 안될 때가 있다.
 잘못된 다운캐스팅을 수행하면 ClassCastException 이 발생!
 
사람		학생은 사람이다. (언제나 ture)		업 캐스팅
학생		사람은 학생이다. (언제나는 아님)	다운캐스팅

사람 human1 = new 사람();  학생과 학생이 아닌 사람 모두 포함되는 사람 객체
사람 human2 = new 학생();  학생인 사람 객체

사람() 생성자를 이용해 객체를 생성하고 사람 자료형에 대입
학생() 생성자를 이용하여 객체를 생성하고 역시 사람 자료형에 대입
둘다 사람 타입의 자료형 이지만 내용은 다름
human1 인스턴스는 사람클래스오 만들어 사람의 공통 속성만 사용 가능
그렇기 때문에 학생으로 다운캐스팅은 불가능
반면에 human2는 실제 학생() 생성자로 객체를 생성했으므로 객체 내부에는 사람의 공통된
특성 뿐이 아니라 학생만의 속성과 기능들이 포함되어 있다. 따라서 human2도 사람 자료형으로
저장되 있지만 학생으로 다운캐스팅 가능

class A{}				// 할아버지
class B ectends A{}		// 아버지
class C ectends B{}		// 손자

// 업 캐스팅  
B c1 = new B();
A a1 = (A) b1;		// A a1 = b1; ok

C c2 = new c();
B b2 = (B) c2; 		// B b2 = c2; ok 업 케스팅은 자동 형변환 
A a2 = (A) c2;		// A a2 = c2; ok

// 다운 캐스팅

A a1 = new A();
B b1 = (B) a1; 		// 불가

A a2 = new B();
B b2 = (B) a2;      // 가능 몸은 A 내용은 B 인 a2 
C c2 = (C) a2;		// B가 자식 C로 변경 불가

어떤 생성자로 생성 되었는지가 중요함!!
B() 생성자로 만들었으면 A로 캐스팅 할 수 있고 C()로 만글었다면 A와 B로 캐스팅 할 수 있다.
*/

	public static void main(String[] args) {
		

	}

}
